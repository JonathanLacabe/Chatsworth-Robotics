{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor SpinnerMotor1 = motor(PORT1, ratio18_1, false);\n\nmotor SpinnerMotor2 = motor(PORT2, ratio18_1, false);\n\nmotor OtherSpinner3 = motor(PORT3, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  *///use coast\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // create competition instance\n  competition Competition;\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n\n\n  //motor.encoder set the arm angle to 0.\n\n  while (true) {\n    wait(100, msec);\n  }\n}\n \nfloat speed = 0.0;\nbool isTime = false;\nfloat DEADZONE = 15.0;\n/*\n// Begin project code\nvoid driveLat(double degree){\n  //+ = forward while negative degrees move backwards.\n  leftBackMotor2.spinFor(forward, degree, degrees, false);//this false is VERY cool because it avoids sequentialization\n  leftMiddleMotor7.spinFor(forward, degree, degrees, false);\n  leftFrontMotor9.spinFor(forward, degree, degrees, false);\n  rightBackMotor4.spinFor(forward, degree, degrees, false);\n  rightMotor6.spinFor(forward, degree, degrees, false);\n  rightFrontMotor20.spinFor(forward, degree, degrees);\n}\n\nvoid turnDrive(double degree){\n  // if val +, move left. if val -, move right.\n  leftBackMotor2.spinFor(reverse, degree, degrees, false);\n  leftMiddleMotor7.spinFor(reverse, degree, degrees, false);\n  leftFrontMotor9.spinFor(reverse, degree, degrees, false);\n  rightBackMotor4.spinFor(forward, degree, degrees, false);\n  rightMotor6.spinFor(forward, degree, degrees, false);\n  rightFrontMotor20.spinFor(forward, degree, degrees);\n}\n\nvoid moveArm(double degree){//this could easily be changed to spinToPosition using the encoder, \n//which would require doing some trial and error to figure out the positioning, would ask to ask sam about that\n  //positive = down, negatives = up\n  if(degree>0){\n    liftMotor5.spinFor(reverse, degree,degrees);\n    liftMotor10.spinFor(reverse, degree,degrees);\n  } else if (degree<0){\n    liftMotor5.spinFor(forward, degree,degrees);\n    liftMotor10.spinFor(forward, degree,degrees);\n  }\n  \n}\n\nvoid driveSpeed(double speed){\n  //0-100, and I'l burn out motors if always set to 100\n  leftBackMotor2.setVelocity(speed, percent);\n  leftMiddleMotor7.setVelocity(speed, percent);\n  leftFrontMotor9.setVelocity(speed, percent);\n  rightBackMotor4.setVelocity(speed, percent);\n  rightMotor6.setVelocity(speed, percent);\n  rightFrontMotor20.setVelocity(speed, percent);\n}\n\n*/\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}/*\nvoid SpinnerMotors(String direction, float speed, String type){\n  if(direction==\"forward\"){\n\n  }\n  if(){\n\n  }\n  if(){\n\n  }\n}*/\n\n\nvoid armControl(bool upIn, bool downIn){//leftbutton and rightbutton\n  if(upIn){\n      printf(\"VEXcode\");\n      OtherSpinner3.stop(brakeType::hold);\n      if(speed<100){//change later for camera movements\n        speed+=0.01;\n        SpinnerMotor1.setVelocity(speed, percent);\n        SpinnerMotor2.setVelocity(speed, percent);\n        printf(\"I AM SPEED\");\n      }\n      SpinnerMotor1.spin(forward, speed, percent);\n      SpinnerMotor2.spin(forward, speed, percent);\n      if(downIn){\n        SpinnerMotor1.spin(forward, speed, percent);\n        SpinnerMotor2.spin(forward, speed, percent);\n        OtherSpinner3.spin(reverse, 100, percent);\n      }\n      \n\n\n    }else if(downIn){\n      SpinnerMotor1.stop(brakeType::coast);\n      SpinnerMotor2.stop(brakeType::coast);\n    //I would believe\n      liftMotor5.spin(reverse, 50, percent);\n      liftMotor10.spin(reverse, 50, percent);\n    }else{\n      \n    }\n\n}\n\nvoid motorControl(float leftIn, float rightIn){\n\n  //TO EDIT:[[[[]]]]\n  /* drive*/\n  //left drive\nleftFrontMotor9.spin(forward, leftIn, percent);\n    leftMiddleMotor7.spin(forward, leftIn, percent);\n    leftBackMotor2.spin(forward, leftIn, percent);\n    \n    //right drive\n    rightFrontMotor20.spin(forward, rightIn, percent);\n    rightMotor6.spin(forward, rightIn, percent);\n    rightBackMotor4.spin(forward, rightIn, percent);\n}\n\n//drivecontrol\n\nvoid driveControl(float fwdIn, float turnIn) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop, so it runs infinitely until something tells it to do someting else\n  float fwdVal;\n  float turnVal;\n  if(fabs(fwdIn) > DEADZONE){\n      fwdVal = fwdIn;\n  }else{\n      fwdVal = 0;\n  }\n\n  if(fabs(turnIn)> DEADZONE){\n    turnVal = turnIn;\n  }else{\n    turnVal = 0;\n  }\n//left and right:\n  motorControl(fwdVal+turnVal, fwdVal - turnVal);\n}\n\nvoid userControl() {\n\n///code the left button, axis 3, to be the movement of the robot forward and backward\nSpinnerMotor1.setPosition(0, degrees);\nSpinnerMotor2.setPosition(0, degrees);\n    \n    while (true) {\n      //driveControl(Controller1.Axis3.position(), Controller1.Axis1.position());\n      armControl(Controller1.ButtonL1.pressing(), Controller1.ButtonR1.pressing());\n\n//to save resources\n    wait(20, msec);\n  }\n}\n//only \n\n*/","textLanguage":"cpp","rconfig":[{"port":[1],"name":"SpinnerMotor1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"SpinnerMotor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"OtherSpinner3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"true","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}