==DICTIONARY==
{Terms defined by coach Sam F.}

The following dictionary is relevant to terms frequently used within the documentation of Vex projects.

For additional Vex-specific terms to be defined, see here:
https://v5rc-kb.recf.org/hc/en-us/articles/9636572958871-VEX-Robotics-Jargon
For general robotics/engineering-related terms, see here:
https://web.archive.org/web/20240519010045id_/http://cmra.rec.ri.cmu.edu/products/vex_online/programming/robotc/reference/hp_glossary.pdf



-Arcade Drive:
  A control style in which one joystick is used for moving/strafing movement (forward & 
  backward), and the second joystick is used for directional movement, turning left or right. 
  This is the control style used by this program, as demonstrated in the movement functions at 
  the bottom. 

-Auton/Auto:
  see "Autonomous Routine".

-Autonomous Routine:
  The first 15 seconds of the match in which there is no driver input nor input from the 
  controller allowed. The robot must move according to a pre-programmed script intended to 
  maximize the number of points obtained during the time period, including obtaining the 'AWP' 
  (see definition). Additionally, there is a one-minute autonomous skills match that teams can 
  partake in at any time during competitions, where teams have one minute to demonstrate the 
  amount of points that they can obtain using a pre-programmed specialized skills script. This is 
  separate from user matches, in which the driver controls the robot during the time period. 

-A.W.P. (Autonomous Win Point):
  A point obtainable through certain objectives in auto, worth half of one 'win', used in ranking 
  calculations.

-brakeType:
  A data type that defines how the motor will act when you tell it to stop. There are three main 
  brakeTypes: coast, hold, and brake. Coast is the default, where all power is cut and the motor 
  begins free-spinning. With coast, the motor will briefly continue spinning due to inertia. Hold 
  forces the motor to stop at the position it is at and to stay in place, preferable in systems in 
  with more motors and higher levels of torque. Brake give opposite direction speed until it stops, 
  forcing it in the opposite direction before cutting all power. While coast allows for a brief 
  moment of continued motion due to past power being supplied to the motor, brake immediately stops 
  the motor.

-Configuration Variable
  Variables that are declared in the '#pragma region' of Vexcode (the upper lines of code), variables 
  that serve as preprocessors to be referenced in the program, exemplified by the controller and the
  motors. These variables cannot be initialized normally and must be first defined as a preprocessor.

-Deadzone:
  The space less than or equal to 15 units away from the center of a joystick, where the joystick
  will oftentimes remain off-centered after use, leading to the robot moving very slowly without 
  use of the controller. To prevent this, a block for all inputs from the joystick within the 
  deadzone area must be created, seen in the driveControl function.

-Far/Near Side Auto:
  In the game Over Under, which this program was designed for, there are two sides on which the 
  robot can be placed during the 15 second and 1 minute autonomous periods. Because of this, the 
  movements of the auto of one side essentially mirror those of the other, along with slight 
  changes made to account for inconsistencies as detailed in the autonomous.

-Matchloading:
  General: 'Entry of a game object by a human player.' How this works is dependent on the game; 
  for example, in the 2024-2025 V5 game "High Stakes", there is no matchloading whatsoever.

-Motor Cartridges:
  Different gear amounts/ratios in the motors, which gives them different numbers of revolutions 
  per minute. Green is the default, with an even amount of torque and speed. Red cartridges are 
  high torque, with stronger motors but reduced speed. Blue cartridges are high speed, with weaker 
  motors that run a lot faster. 

-Motor Encoder:
  An integrated encoder. These are sensors that determine the position of the shaft of the motor
  at any time, showing past movement and being useful for relative positioning, as used in the 
  autonomous routine and the userControl() function.

-Motor Groups:
  A config. variable that can be declared that includes multiple motors, allowing actions to be 
  performed across multiple motors with a call to one motor group, similar to a traversal of 
  motors. A motor group would have been preferable to use for the left and right motors of the 
  drivebase, but this was not done for reasons outlined in the FAQ.

-Omega:
  A Chatsworth High School V5 robot, the code for which you are currently viewing.

-Over Under:
  The 2023-2024 season of Vex V5 robotics.

-Pneumatics:
  Air-pressure powered activators, where compressed air kept in tanks provides an added boost 
  to a robot action faster and greater than can be done by a motor. Pneumatics are applicable 
  in specific situations where the robot needs to perform a quick linear actuation, in order 
  to push or pull game objects. 

-Port/Port Number:
  The spots on the brain where components such as motors, sensors, radio, etc. can be plugged 
  in for use in programming. It is a good naming rule to include the port number of a specific 
  component in the name of the component as used in the code, as demonstrated in the motors of 
  this program.

-Preloading
  Gameobjects that start on or touching the robot. The Omega bot begins in autonomous with a 
  preloaded triball in front, scoring the first point using it. See the auto documentation for 
  more detail.

-Preprocessor:
  An operator that compiles before the rest of the program, allowing for text substitution and, 
  in Vexcode, variable declarations for devices, reference values such as motors, motor groups, 
  and any other piece of hardware that is being used.

-Rule F1:
  The most important rule in Vex, FRC, and all of Robotics.

-Sequentialization:
  A general rule of programming where lines of code are compiled top-to-bottom (except for 
  preprocessors), with the program always waiting until one line has finished for the next one to 
  run. This rule can be maintained during all programming events except for special circumstances: 
  In Vexcode (as in other languages), this can be circumvented in functions such as spinFor through 
  the addition of 'false' argument at the end of the function call, which will cause the next line 
  to run concurrent to the previous. This is useful in a variety of circumstances, one instance 
  described in the driveLat function. 

-Tank Drive:
  A control style that has where two sets of motors (the left and right wheels of the robot) are 
  individually controlled using the joysticks or another mechanism on the controller, with one 
  joystick controlling the left motors and the other controlling the right motors. Thus, pushing 
  the joysticks all the way forward or backward would make the robot move straight forward or 
  backward without turning. 
  Tank drive is useful in any instance in which much power and speed is needed in one direction, 
  where extra maneuverability is not necessary.
